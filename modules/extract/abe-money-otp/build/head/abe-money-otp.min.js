var g_headers={Accept:"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8","Accept-Language":"ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4",Connection:"keep-alive","User-Agent":"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36"},baseurl="https://direkt.otpbank.ru";
function login(){var c=AnyBalance.getPreferences();AnyBalance.setDefaultCharset("utf-8");checkEmpty(c.login,"Введите логин!");checkEmpty(c.password,"Введите пароль!");var b=AnyBalance.requestGet(baseurl+"/homebank/do/bankszamla/bankszamlaMuvelet?muveletStatusz=vegrehajtas",g_headers);if(!b||400<AnyBalance.getLastStatusCode())throw AnyBalance.trace(b),new AnyBalance.Error("Ошибка при подключении к сайту интернет-банка! Попробуйте обновить данные позже.");if(/exit/i.test(b))AnyBalance.trace("Уже залогинены, используем существующую сессию");
else try{b=AnyBalance.requestPost(baseurl+"/homebank/do/bejelentkezesJelszoalapu",{azonosito:c.login,jelszo:c.password,tranzakcionkentiAzonositas:"off",muvelet:"login",cacheHasznalat:"off",x:86,y:11,lang:"ru"},addHeaders({Referer:baseurl+"?error=2919_"}))}catch(a){AnyBalance.trace(a),b=AnyBalance.requestGet(baseurl+"/homebank/do/bankszamla/bankszamlaMuvelet?muveletStatusz=vegrehajtas",g_headers)}if(!/exit/i.test(b)){if(c=getParam(b,null,null,/<div[^>]+paddings[^>]*>([\s\S]*?)<\/div>/i,replaceTagsAndSpaces))throw new AnyBalance.Error(c,
null,/неверно ввели логин или пароль/i.test(c));if(/Ваш доступ в ОТПдирект заблокирован/i.test(b))throw new AnyBalance.Error("Ваш доступ в ОТПдирект заблокирован, Пожалуйста, обратитесь в Контакт-Центр или в ближайшее для Вас Отделение Банка для разблокировки доступа.",null,!0);AnyBalance.trace(b);throw new AnyBalance.Error("Не удалось зайти в интернет-банк. Сайт изменен?");}b=waitForTransactionEx(b);__setLoginSuccessful();return b}
function processAccounts(c,b){if(AnyBalance.isAvailable("accounts")){var a=getParam(c,null,null,/<table[^>]+id="szamlaT"[^>]*>((?:[\s\S](?!<table)|[\s\S]<table[\s\S]*?<\/table>)*?)<\/table>/i),a=sumParam(a,null,null,/<tr[^>]+class="(?:paratlan|paros)[^>]*>((?:[\s\S](?!<table)|[\s\S]<table[\s\S]*?<\/table>)*?)<\/tr>/ig)||[];if(a.length){AnyBalance.trace("Найдено счетов: "+a.length);b.accounts=[];for(var d=0;d<a.length;++d){var e=getParam(a[d],null,null,/<input[^>]+NumberInput[^>]+value\s*=\s*"([^"]*)/i,
replaceTagsAndSpaces),f=getParam(a[d],null,null,/<input[^>]+NumberInput[^>]+value\s*=\s*"([^"]*)/i,replaceTagsAndSpaces),g=getParam(a[d],null,null,/<div[^>]+nagyelsooszlop_1[^>]*>([\s\S]*?)<\/div>/i,replaceTagsAndSpaces),e={__id:e,__name:g,num:f};__shouldProcess("accounts",e)&&processAccount(a[d],e);b.accounts.push(e)}}else AnyBalance.trace(c),AnyBalance.trace("Не удалось найти счета.")}}
function processAccount(c,b){AnyBalance.trace("Обработка счёта "+b.__id);var a=getParam(c,null,null,/<a[^>]+href="([^"]*)[^>]+id="reszleteslink/i,replaceHtmlEntities);a?(getParam(c,b,"accounts.balance",/<div[^>]+hatodikoszlop[^>]*>([^<]*)/i,replaceTagsAndSpaces,parseBalance),getParam(c,b,["accounts.currency","accounts.balance"],/<div[^>]+hatodikoszlop[^>]*>([^<]*)/i,replaceTagsAndSpaces,parseCurrency),a=AnyBalance.requestGet(baseurl+a,addHeaders({Referer:baseurl+"homebank/do/bankszamla/bankszamlaMuvelet"})),
a=waitForTransactionEx(a),getParam(a,b,"accounts.date_start",/Дата открытия(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseDate),getParam(a,b,"accounts.blocked",/Заблокированная сумма(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseBalance),getParam(a,b,"accounts.product",/Наименование продукта(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces),isAvailable("accounts.transactions")&&processAccountTransactions(a,c,b)):AnyBalance.trace("Не удалось найти ссылку на детальную информацию по счёту "+
b.__id)}
function processCards(c,b){if(AnyBalance.isAvailable("cards")){var a=getParam(c,null,null,/<table[^>]+id="kartyaT"[^>]*>((?:[\s\S](?!<table)|[\s\S]<table[\s\S]*?<\/table>)*?)<\/table>/i),a=sumParam(a,null,null,/<tr[^>]+class="(?:paratlan|paros)[^>]*>((?:[\s\S](?!<table)|[\s\S]<table[\s\S]*?<\/table>)*?)<\/tr>/ig)||[];if(a.length){AnyBalance.trace("Найдено карт: "+a.length);b.cards=[];for(var d=0;d<a.length;++d){var e=getParam(a[d],null,null,/<div[^>]+nagyharmadikoszlop_1[^>]*>([\s\S]*?)<\/div>/i,replaceTagsAndSpaces),
f=getParam(a[d],null,null,/<div[^>]+nagyharmadikoszlop_1[^>]*>([\s\S]*?)<\/div>/i,replaceTagsAndSpaces),g=getParam(a[d],null,null,/<input[^>]+nameinput[^>]+value\s*=\s*"([^"]*)/i,replaceTagsAndSpaces),e={__id:e,__name:g,num:f};__shouldProcess("cards",e)&&processCard(a[d],e);b.cards.push(e)}}else AnyBalance.trace(c),AnyBalance.trace("Карты не найдены.")}}
function processCard(c,b){AnyBalance.trace("Обработка карты "+b.__name);var a=getParam(c,null,null,/<a[^>]+href="([^"]*)[^>]+id="reszleteslink/i);a?(getParam(c,b,"cards.balance",/<div[^>]+hatodikoszlop[^>]*>([^<]*)/i,replaceTagsAndSpaces,parseBalance),a=AnyBalance.requestGet(baseurl+a,g_headers),a=waitForTransactionEx(a),getParam(a,b,"cards.tDebt",/сумма общей задолженности(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseBalance),getParam(a,b,"cards.mDebt",/основной долг(?:[^>]*>){2}([\s\S]*?)<\/td>/i,
replaceTagsAndSpaces,parseBalance),getParam(a,b,"cards.cPct",/текущие проценты(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseBalance),getParam(a,b,"cards.own",/остаток собственных средств(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseBalance),getParam(a,b,"cards.oDebt",/просроченный долг(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseBalance),getParam(a,b,"cards.oPct",/Проценты на просрочку(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseBalance),getParam(a,
b,"cards.minpay",/Минимальный платеж(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseBalance),getParam(a,b,"cards.limit",/кредитный лимит(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseBalance),getParam(a,b,"cards.gracepay",/платеж льготного периода(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseBalance),getParam(a,b,"cards.currency cards.tDebt cards.mDebt cards.cPct cards.own cards.oDebt cards.oPct cards.minpay cards.limit cards.gracepay".split(" "),/сумма общей задолженности(?:[^>]*>){2}([\s\S]*?)<\/td>/i,
replaceTagsAndSpaces,parseCurrency),getParam(a,b,"cards.minpay_till",/Дата очередного платежа(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseDate),getParam(a,b,"cards.gracepay_till",/Дата окончания льготного периода(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseDate),getParam(a,b,"cards.type",/Основная\s*\/\s*дополнительная(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces),getParam(a,b,"cards.status",/статус карты(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces),getParam(a,
b,"cards.agreement",/номер договора(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces),getParam(a,b,"cards.aDate_start",/дата открытия договора(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseDate),getParam(a,b,"cards.date_start",/дата выпуска карты(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseDate),getParam(a,b,"cards.till",/Дата окончания действия карты(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseDate),getParam(a,b,"cards.pPct",/при оплате товаров(?:[^>]*>){2}([\s\S]*?)<\/td>/i,
replaceTagsAndSpaces,parseBalance),getParam(a,b,"cards.wPct",/при снятии наличных(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseBalance),getParam(a,b,"cards.aCard",/дополнительная карта(?:[^>]*>){2}([\s\S]*?)<\/td>/i,replaceTagsAndSpaces),isAvailable("cards.transactions")&&processCardTransactions(a,c,b)):AnyBalance.trace("Не удалось найти ссылку на детальную информацию по карте "+b.__name)}
function processDeposits(c,b){if(AnyBalance.isAvailable("deposits")){var a=getParam(c,null,null,/<table[^>]+id="betetT"[^>]*>((?:[\s\S](?!<table)|[\s\S]<table[\s\S]*?<\/table>)*?)<\/table>/i),a=sumParam(a,null,null,/<tr[^>]+class="(?:paratlan|paros)[^>]*>((?:[\s\S](?!<table)|[\s\S]<table[\s\S]*?<\/table>)*?)<\/tr>/ig)||[];if(a.length){AnyBalance.trace("Найдено депозитов: "+a.length);b.deposits=[];for(var d=0;d<a.length;++d){var e=getParam(a[d],null,null,/<div[^>]+class="harmadikmegnagyoszlop_1[^>]*>([\s\S]*?)<\/div>/i,
replaceTagsAndSpaces),f=getParam(a[d],null,null,/<div[^>]+class="harmadikmegnagyoszlop_1[^>]*>([\s\S]*?)<\/div>/i,replaceTagsAndSpaces),g=getParam(a[d],null,null,/<div[^>]+class="nagyelsooszlop_1"[^>]*>([\s\S]*?)<\/div>/i,replaceTagsAndSpaces),e={__id:e,__name:g,num:f};__shouldProcess("deposits",e)&&processDeposit(a[d],e);b.deposits.push(e)}}else AnyBalance.trace(c),AnyBalance.trace("Не удалось найти депозиты.")}}
function processDeposit(c,b){AnyBalance.trace("Обработка депозита "+b.__name);getParam(c,b,"deposits.balance",/<div[^>]+class="hatodikoszlop"[^>]*>([\s\S]*?)<\/div>/i,replaceTagsAndSpaces,parseBalance);var a=getParam(c,null,null,/<a[^>]+href="([^"]*)[^>]+id="reszleteslink/i,null,html_entity_decode);if(!a)throw new AnyBalance.Error("Не удалось найти ссылку на детальную информацию по депозиту.");a=AnyBalance.requestGet(baseurl+a,g_headers);a=waitForTransactionEx(a);getParam(a,b,"deposits.till",/Дата закрытия вклада[\s\S]*?<td[^>]*>([\s\S]*?)<\/td>/i,
replaceTagsAndSpaces,parseDate);getParam(a,b,"deposits.available",/Доступная сумма для расхода[\s\S]*?<td[^>]*>([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseBalance);getParam(a,b,"deposits.currency deposits.balance deposits.available deposits.aBalance deposits.mindep deposits.blocked deposits.minsaldo".split(" "),/Доступная сумма для расхода[\s\S]*?<td[^>]*>([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseCurrency);getParam(a,b,"deposits.aBalance",/Доступный остаток[\s\S]*?<td[^>]*>([\s\S]*?)<\/td>/i,
replaceTagsAndSpaces,parseBalance);getParam(a,b,"deposits.topup",/Возможность пополнения[\s\S]*?<td[^>]*>([\s\S]*?)<\/td>/i,replaceTagsAndSpaces);getParam(a,b,"deposits.withdraw",/Возможность расходных операций[\s\S]*?<td[^>]*>([\s\S]*?)<\/td>/i,replaceTagsAndSpaces);getParam(a,b,"deposits.minsaldo",/Неснижаемый остаток при расходе[\s\S]*?<td[^>]*>([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseBalance);getParam(a,b,"deposits.mindep",/Минимальная сумма вклада[\s\S]*?<td[^>]*>([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,
parseBalance);getParam(a,b,"deposits.lasttopup",/Последняя дата пополнения[\s\S]*?<td[^>]*>([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseDate);getParam(a,b,"deposits.lastwithdraw",/Последняя дата расхода[\s\S]*?<td[^>]*>([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseDate);getParam(a,b,"deposits.blocked",/Заблокированная сумма[\s\S]*?<td[^>]*>([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,parseBalance);getParam(a,b,"deposits.pct",/Процентная ставка по вкладу[\s\S]*?<td[^>]*>([\s\S]*?)<\/td>/i,replaceTagsAndSpaces,
parseBalance);getParam(a,b,"deposits.pct_type",/Тип начисления процентов[\s\S]*?<td[^>]*>([\s\S]*?)<\/td>/i,replaceTagsAndSpaces);getParam(a,b,"deposits.contract",/Номер договора[\s\S]*?<td[^>]*>([\s\S]*?)<\/td>/i,replaceTagsAndSpaces);isAvailable("deposits.transactions")&&processDepositTransactions(a,c,b)}function processCredits(c,b){throw new AnyBalance.Error("Обработка кредитов пока не поддерживается. Пожалуйста, обратитесь к разработчику.");}
function processInfo(c,b){var a=b.info={};getParam(c,a,"info.fio",/<span[^>]+name[^>]*>([\s\S]*?)<\/span>/i,replaceTagsAndSpaces);getParam(c,a,"info.nick",/<span[^>]+login[^>]*>([\s\S]*?)<\/a>/i,replaceTagsAndSpaces)}
function waitForTransactionEx(c){var b=getElement(c,/<form[^>]+id="varakozasForm"[^>]*>/i);if(!b)throw new AnyBalance.Error("Не удалось найти форму ожидания.");var a=getParam(b,null,null,/action="([^"]*)/i,null,html_entity_decode);c=getParam(c,null,null,/actionURL\s*:\s*['"]([^'"]*)/);waitForTransaction(c);b=createFormParams(b);return c=AnyBalance.requestPost(baseurl+a,b,g_headers)}
function waitForTransaction(c){do{html=AnyBalance.requestGet(baseurl+c,g_headers);if("FINISHED"==html||"TIMEOUT"==html)break;if("WAITING"!=html)throw new AnyBalance.Error("Неизвестный ответ от проверки транзакции: "+html);AnyBalance.trace("Waiting for transaction to finish...");AnyBalance.sleep(3E3)}while(1)};
